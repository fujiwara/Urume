#!/usr/bin/env perl
use strict;
use warnings;
use 5.12.0;
use Config::Pit ();
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON;
use Path::Class qw/ file /;
use Log::Minimal;
use IO::Prompt::Tiny qw/prompt/;
use String::Random;

my $command = shift;
my ($ua, $endpoint) = init();

usage() unless defined $command;

if ( my $func = main->can("_$command") ) {
    infof "command: %s", $command;
    $func->(@ARGV);
}
else {
    usage();
}
exit;

sub url($) {
    my $path = shift;
    $endpoint . $path;
}

sub request($) {
    my $req = shift;
    warn $req->as_string if $ENV{DEBUG};
    $ua->request($req);
}

sub pp($) {
    my $res = shift;

    if ( $res->code =~ /^2/ ) {
        infof $res->status_line;
    }
    else {
        warnf $res->status_line;
    }
    warn $res->as_string if $ENV{DEUBG};

    if ($res->content_type =~ /json/) {
        my $obj = decode_json($res->content);
        print JSON->new->pretty->encode($obj);
    }
    else {
        print $res->content;
    }
}

sub _list {
    pp request GET url "vm/list";
}

sub _config {
    pp request GET url "config";
}

sub _info {
    my $name = shift;
    usage("info") if !defined $name;

    pp request GET url "vm/info/$name";
}

sub _start {
    my $name = shift;
    usage("start") if !defined $name;
    pp request POST url "vm/start/$name";
}

sub _stop {
    my $name = shift;
    usage("start") if !defined $name;
    pp request POST url "vm/stop/$name";
}

sub _force_stop {
    my $name = shift;
    usage("start") if !defined $name;
    pp request POST url "vm/force_stop/$name";
}

sub _remove {
    my $name = pop;
    usage("start") if !defined $name;

    my $yes;
    GetOptions(
        "yes|y" => \$yes,
    );

    my $answer = $yes
               ? "Y"
               : prompt("Really remove $name? [y/N]", "n");
    if ( $answer =~ /^[Yy]/ ) {
        pp request POST url "vm/remove/$name";
    }
    else {
        exit 1;
    }
}

sub _register {
    my ($public_key, $name, $base, $user_data, $wait);
    GetOptions(
        "public-key|k=s" => \$public_key,
        "name|n=s"       => \$name,
        "base|b=s"       => \$base,
        "user-data|d=s"  => \$user_data,
        "wait|w"         => \$wait,
    );
    my $url = url "vm/register";
    usage("register") if !defined $base || !defined $name;

    my $key  = $public_key ? file($public_key)->slurp : undef;
    my $data = $user_data  ? file($user_data)->slurp  : undef;
    pp request(
        POST $url,
        Content_Type => "form-data",
        Content => [
            name       => $name,
            base       => $base,
            public_key => $key,
            user_data  => $data,
        ]
    );
    return unless $wait;
    infof "waiting for vm boot up...";
    pp request(
        GET url "notify/$name",
    );
}

sub _public_key {
    my $name = shift;
    my $file = shift;
    usage("public_key") if !defined $name;
    my $url = url "public_key/$name";

    if ( defined $file ) {
        my $key = file($file)->slurp;
        pp request(
            POST $url,
            Content_Type => "form-data",
            Content => [
                public_key => $key,
            ]
        );
    }
    else {
        pp request GET $url;
    }
}

sub _user_data {
    my $name = shift;
    my $file = shift;
    usage("user_data") if !defined $name;
    my $url  = url "user_data/$name";

    if ( defined $file ) {
        my $data = file($file)->slurp;
        pp request(
            POST $url,
            Content_Type => "form-data",
            Content => [
                user_data => $data,
            ]
        );
    }
    else {
        pp request GET $url;
    }
}

sub _ssh {
    my $name = shift;
    usage("ssh") if !defined $name;

    my $res = request GET url "vm/info/$name";
    if ( $res->code == 200 ) {
        my $vm  = decode_json($res->content);
        my @command = ("ssh", $vm->{ip_addr}, @_);
        infof "@command";
        exec @command;
    }
    else {
        pp($res);
    }
}

sub usage {
    my $type = shift;
    say "Usage:";
    $type //= "";
    if ( $type eq "register" ) {
        say " mezasi register --name vmname --base baseimage [--public-key path/to/id_rsa.pub] [--user-data /path/to/user.sh]";
        say "  --name       : vm name (* required)";
        say "  --base       : base image (*)";
        say "  --public-key : path to ssh public key file (for root\@vm)";
        say "  --user-data  : path to shell script executed on boot up";
        say "  --wait       : wait for vm boot up";
    }
    elsif ( $type eq "public_key" ) {
        say " mezasi public_key vmname path/to/id_rsa.pub";
    }
    elsif ( $type eq "user_data" ) {
        say "register: mezasi user_data vmname path/to/user_data_file";
        say "retrieve: mezasi user_data vmname";
    }
    elsif ( $type =~ /^(start|stop|force_stop|remove|info)$/ ) {
        say " mezasi $type vmname";
    }
    elsif ( $type eq "ssh" ) {
        say " mezasi ssh vmname [ssh options]";
    }
    else {
        say " mezasi (list|info|register|start|stop|force_stop|remove|public_key|config|ssh|user_data)";
    }
    print "\n";
    exit 1;
}

sub generate_new_password {
    String::Random->new->randpattern(
        join( "", map { (qw/ c C n ! /)[rand 4] } ( 1 .. 12 ) )
    );
}

sub init {
    $Log::Minimal::PRINT = sub {
        my ( $time, $type, $message, $trace, $raw_message ) = @_;
        warn "$time [$type] $message\n";
    };
    $Log::Minimal::COLOR = -t STDERR;
    $ENV{LM_DEBUG} = $ENV{DEBUG};

    my $config = Config::Pit::pit_get("urume.config", require => {
        endpoint => "API endpoint (http://....)",
    });
    $config->{password} //= generate_new_password();
    Config::Pit::set("urume.config", data => $config);

    my $ua = LWP::UserAgent->new(
        agent   => "Mezasi/0.1",
        timeout => 300,
    );
    my $endpoint = $config->{endpoint};
    $endpoint .= "/" if $endpoint !~ m{/$};
    infof "endpoint: %s", $endpoint;

    return ($ua, $endpoint);
}
